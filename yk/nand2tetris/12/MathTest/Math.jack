// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    // twoToThe[j] = 2 ** j.
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        // Initializes twoToThe.
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;

        while (i < 16) {
            let twoToThe[i] = twoToThe[i - 1] + twoToThe[i - 1];  // Avoids *.
            let i = i + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int j, shiftedX, sum;
        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;  // Avoids *.
            let j = j + 1;
        }

        return sum;
    }

    /** Returns if bit j of x is 1 or not. */
    function int bit(int x, int j) {
        if ((x & twoToThe[j]) = 0) {
            return false;
        }

        return true;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;
        if (x < 0) {
            if (y < 0) {
                let result = Math.dividePositive(-x, -y);
                return result;
            } else {
                let result = Math.dividePositive(-x, y);
                return -result;
            }
        } else {
            if (y < 0) {
                let result = Math.dividePositive(x, -y);
                return -result;
            } else { // 0 <= x, y
                let result = Math.dividePositive(x, y);
                return result;
            }
        }
    }

    function int dividePositive(int x, int y) {  // p. 282
        var int q;

        if (y > x) {
            return 0;
        }

        let q = Math.dividePositive(x, 2 * y);

        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {  // p. 283
        var int j, next, pow, y;
        let y = 0;
        let j = 7;

        while (j > -1) {
            let next = y + twoToThe[j];
            let pow = next * next;

            if (((pow < x) | (pow = x))
                & (pow > -1)) {  // p. 304
                let y = next;
            }

            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }

        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }

        return b;
    }
}
