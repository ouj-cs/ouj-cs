// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let s = Array.new(maxLength + 1);
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do s.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let s[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {  // p. 284 string2Int
        var int d, i, sign, v;
        let sign = 1;
        let v = 0;
        let i = 0;

        if (s[i] = 45) {  // "-" character.
            let sign = sign * -1;
            let i = i + 1;
        }

        while (i < len) {
            if (s[i] < 48) {
                return v;
            }

            if (s[i] > 57) {
                return v;
            }

            let d = s[i] - 48;
            let v = (v * 10) + d;
            let i = i + 1;
        }

        return sign * v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {  // p. 284 int2String
        let len = 0;

        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }

        do setIntSub(val);
        return;
    }

    method void setIntSub(int val) {
        var int c, lastDigit;
        let lastDigit = val - ((val / 10) * 10);
        let c = lastDigit + 48;

        if (val < 10) {
            do appendChar(c);
        } else {
            do setIntSub(val / 10);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {  // p. 76, 99 ?
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
