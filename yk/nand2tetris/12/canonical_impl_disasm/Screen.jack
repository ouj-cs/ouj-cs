class Screen {
    static Array twoToThe;
    static int base;
    static boolean color;

    function void init() {
        var int i;
        let base = 16384;
        let color = true;
        let twoToThe = Array.new(17);
        let twoToThe[0] = 1;

        while (i < 16) {
            let i = i + 1;
            let twoToThe[i] = twoToThe[i - 1] + twoToThe[i - 1];
        }

        return;
    }

    function void clearScreen() {
        var int i;

        while (i < 8192) {
            let base[i] = 0;
            let i = i + 1;
        }

        return;
    }

    function void updateLocation(int word, int value) {
        if (color) {
            let base[word] = base[word] | value;
        } else {
            let base[word] = base[word] & ~value;
        }

        return;
    }

    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function void drawPixel(int x, int y) {
        var int wordCol, bit, word;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(7);
        }

        let wordCol = x / 16;
        let bit = x - (wordCol * 16);
        let word = (y * 32) + wordCol;
        do Screen.updateLocation(word, twoToThe[bit]);
        return;
    }

    function void drawConditional(int x, int y, int is_yx) {
        if (is_yx) {
            do Screen.drawPixel(y, x);
        } else {
            do Screen.drawPixel(x, y);
        }

        return;
    }

    function void drawLine(int x1, int y1, int x2, int y2) {
        var int y0, x0, height, width, tmp, loc;
        var boolean is_portrait, is_inv;
        var int x_max, dy, dx;

        if ((x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255)) {
            do Sys.error(8);
        }

        let width = Math.abs(x2 - x1);
        let height = Math.abs(y2 - y1);
        let is_portrait = width < height;

        if ((is_portrait & (y2 < y1)) | (~is_portrait & (x2 < x1))) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        if (is_portrait) {
            let tmp = width;
            let width = height;
            let height = tmp;
            let x0 = y1;
            let y0 = x1;
            let x_max = y2;
            let is_inv = x1 > x2;
        } else {
            let x0 = x1;
            let y0 = y1;
            let x_max = x2;
            let is_inv = y1 > y2;
        }

        let loc = (2 * height) - width;
        let dy = 2 * height;
        let dx = 2 * (height - width);
        do Screen.drawConditional(x0, y0, is_portrait);

        while (x0 < x_max) {
            if (loc < 0) {
                let loc = loc + dy;
            } else {
                let loc = loc + dx;

                if (is_inv) {
                    let y0 = y0 - 1;
                } else {
                    let y0 = y0 + 1;
                }
            }

            let x0 = x0 + 1;
            do Screen.drawConditional(x0, y0, is_portrait);
        }

        return;
    }

    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int word, word_last, col_width, col_left, col_right, bits_last, bits_first, bit_left, bit_right;

        if ((x1 > x2) | (y1 > y2) | (x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255)) {
            do Sys.error(9);
        }

        let col_left = x1 / 16;
        let bit_left = x1 - (col_left * 16);
        let col_right = x2 / 16;
        let bit_right = x2 - (col_right * 16);
        let bits_first = ~(twoToThe[bit_left] - 1);
        let bits_last = twoToThe[bit_right + 1] - 1;
        let word = (y1 * 32) + col_left;
        let col_width = col_right - col_left;

        while(~(y1 > y2)) {
            let word_last = word + col_width;

            if (col_width = 0) {
                do Screen.updateLocation(word, bits_last & bits_first);
            } else {
                do Screen.updateLocation(word, bits_first);
                let word = word + 1;

                while (word < word_last) {
                    do Screen.updateLocation(word, -1);
                    let word = word + 1;
                }

                do Screen.updateLocation(word_last, bits_last);
            }

            let y1 = y1 + 1;
            let word = word_last + 32 - col_width;
        }

        return;
    }

    function void drawHorizontal(int y, int x0, int x1) {
        var int word, col_left, col_right, word_last, bits_last, bits_first, local6, left, right, bit_left, bit_right;
        let left = Math.min(x0, x1);
        let right = Math.max(x0, x1);

        if ((y > -1) & (y < 256) & (left < 512) & (right > -1)) {
            let left = Math.max(left, 0);
            let right = Math.min(right, 511);
            let col_left = left / 16;
            let bit_left = left - (col_left * 16);
            let col_right = right / 16;
            let bit_right = right - (col_right * 16);
            let bits_first = ~(twoToThe[bit_left] - 1);
            let bits_last = twoToThe[bit_right + 1] - 1;
            let word = (y * 32) + col_left;
            let local6 = col_right - col_left;
            let word_last = word + local6;

            if (local6 = 0) {
                do Screen.updateLocation(word, bits_last & bits_first);
            } else {
                do Screen.updateLocation(word, bits_first);
                let word = word + 1;

                while (word < word_last) {
                    do Screen.updateLocation(word, -1);
                    let word = word + 1;
                }

                do Screen.updateLocation(word_last, bits_last);
            }
        }

        return;
    }

    function void drawSymetric(int x, int y, int width0, int width1) {
        do Screen.drawHorizontal(y - width1, x + width0, x - width0);
        do Screen.drawHorizontal(y + width1, x + width0, x - width0);
        do Screen.drawHorizontal(y - width0, x - width1, x + width1);
        do Screen.drawHorizontal(y + width0, x - width1, x + width1);
        return;
    }

    function void drawCircle(int x, int y, int r) {
        var int i, height, loc;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(12);
        }

        if (((x - r) < 0) | ((x + r) > 511) | ((y - r) < 0) | ((y + r) > 255)) {
            do Sys.error(13);
        }

        let height = r;
        let loc = 1 - r;
        do Screen.drawSymetric(x, y, i, height);

        while (height > i) {
            if (loc < 0) {
                let loc = loc + (2 * i) + 3;
            } else {
                let loc = loc + (2 * (i - height)) + 5;
                let height = height - 1;
            }

            let i = i + 1;
            do Screen.drawSymetric(x, y, i, height);
        }

        return;
    }
}
