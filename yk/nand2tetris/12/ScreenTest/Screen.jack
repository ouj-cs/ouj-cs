// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        do Screen.setColor(true);
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;

        while (i < 16) {
            let twoToThe[i] = twoToThe[i - 1] + twoToThe[i - 1];
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int c, r;
        do Screen.setColor(false);
        let c = 0;
        let r = 0;

        while (r < 256) {
            while (c < 512) {
                do Screen.drawPixel(c, r);
                let c = c + 1;
            }

            let r = r + 1;
        }

        do Screen.setColor(true);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, word, mod;
        let address = 16384 + (y * 32) + (x / 16);  // p. 305
        let word = Memory.peek(address);
        let mod = twoToThe[x - ((x / 16) * 16)];

        if (color) {
            let word = word | mod;
        } else {
            let word = word & ~mod;
        }

        do Memory.poke(address, word);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx, tmp;

        if (x1 > x2) {  // Ensures dx >= 0.
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        if (dy < 0) {
            while (((a < dx) | (a = dx)) & ((b > dy) | (b = dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if ((adyMinusbdx > 0) | (dy = 0)) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b - 1;
                    let adyMinusbdx = adyMinusbdx + dx;
                }
            }
        } else {
            while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if ((adyMinusbdx < 0) | (dy = 0)) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y1 < (y2 + 1)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt;
        let dy = -r;

        while (dy < (r + 1)) {
            let sqrt = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - sqrt, y + dy, x + sqrt, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
