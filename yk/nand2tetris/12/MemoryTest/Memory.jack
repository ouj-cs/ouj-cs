// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int head;

    /** Initializes the class. */
    function void init() {
        let head = 2048;
        do List.setLength(head, 1000);
        do List.setNext(head, 0);
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var boolean b;
        var int block, seg, segLen, prevSeg;
        let prevSeg = 0;
        let seg = head;
        let b = true;

        while (b) {
            if (seg = 0) {
                return 0;
            }

            let segLen = List.getLength(seg);

            if (segLen > size) {
                let block = seg + segLen - size;
                let b = false;
            }

            let prevSeg = seg;
            let seg = List.getNext(seg);
        }

        if ((segLen - size) > 3) {
            do List.setLength(seg, segLen - size - 1);
        } else {
            if (prevSeg) {
                do List.setNext(prevSeg, List.getNext(seg));
            } else {
                let head = List.getNext(seg);
            }
        }

        do List.setLength(block - 1, size + 1);
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int seg;
        let seg = o - 1;
        do List.setNext(seg, head);
        let head = seg;
        return;
    }
}
